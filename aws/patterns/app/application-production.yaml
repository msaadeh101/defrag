spring:
  application:
    name: ${SERVICE_NAME:microservice-app}
  profiles:
    active: production
    
  datasource:
    url: jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_NAME:appdb} # DB_NAME fallsback to appdb
    username: ${DB_USERNAME:app}
    password: ${DB_PASSWORD}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: ${DB_POOL_SIZE:20}
      minimum-idle: ${DB_POOL_MIN_IDLE:5}
      idle-timeout: 300000
      max-lifetime: 1800000
      connection-timeout: 20000
      leak-detection-threshold: 60000
      pool-name: HikariPool-${spring.application.name}
      data-source-properties:
        cachePrepStmts: true
        prepStmtCacheSize: 250
        prepStmtCacheSqlLimit: 2048
        useServerPrepStmts: true
        
  jpa:
    hibernate:
      ddl-auto: validate
      naming:
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        jdbc:
          batch_size: 20
          batch_versioned_data: true
        order_inserts: true
        order_updates: true
        generate_statistics: false
        
  redis:
    host: ${REDIS_HOST:localhost}
    port: ${REDIS_PORT:6379}
    password: ${REDIS_PASSWORD:} # REDIS_PASSWORD has no fallback
    lettuce:
      pool:
        max-active: ${REDIS_POOL_MAX_ACTIVE:8}
        max-wait: -1ms
        max-idle: 8
        min-idle: 0
        
  kafka:
    bootstrap-servers: ${KAFKA_BROKERS:localhost:9092}
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      acks: all
      retries: ${KAFKA_PRODUCER_RETRIES:3}
      properties:
        enable.idempotence: true
        max.in.flight.requests.per.connection: 5
    consumer:
      group-id: ${spring.application.name}
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      auto-offset-reset: earliest
      enable-auto-commit: false
      properties:
        spring.json.trusted.packages: "com.company.microservice"

server:
  port: ${SERVER_PORT:8080}
  tomcat:
    threads:
      max: ${TOMCAT_MAX_THREADS:200}
      min-spare: ${TOMCAT_MIN_SPARE_THREADS:10}
    max-connections: ${TOMCAT_MAX_CONNECTIONS:8192}
    accept-count: ${TOMCAT_ACCEPT_COUNT:100}
    connection-timeout: ${TOMCAT_CONNECTION_TIMEOUT:20000}
  compression:
    enabled: true
    mime-types: application/json,application/xml,text/html,text/xml,text/plain,application/javascript,text/css
    min-response-size: 1024

management:
  server:
    port: ${MANAGEMENT_PORT:8081}
  endpoints:
    web:
      base-path: /actuator
      exposure:
        include: health,info,metrics,prometheus,configprops,env,loggers
  endpoint:
    health:
      show-details: when-authorized
      probes:
        enabled: true
    metrics:
      enabled: true
    prometheus:
      enabled: true
  metrics:
    export:
      prometheus:
        enabled: true
        descriptions: true
    distribution:
      percentiles-histogram:
        http.server.requests: true
        spring.data.repository.invocations: true
      sla:
        http.server.requests: 100ms,200ms,300ms,500ms,1s,2s
    tags:
      application: ${spring.application.name}
      environment: ${ENVIRONMENT:production}
      region: ${AWS_REGION:us-west-2}

logging:
  level:
    org.springframework.web: ${LOG_LEVEL_WEB:INFO}
    org.springframework.security: ${LOG_LEVEL_SECURITY:INFO}
    org.hibernate: ${LOG_LEVEL_HIBERNATE:WARN}
    com.company.microservice: ${LOG_LEVEL_APP:INFO}
  pattern:
    console: "%d{ISO8601} [%thread] %-5level [%X{traceId:-},%X{spanId:-}] %logger{36} - %msg%n"
    file: "%d{ISO8601} [%thread] %-5level [%X{traceId:-},%X{spanId:-}] %logger{36} - %msg%n"
  file:
    name: /var/log/${spring.application.name}/${spring.application.name}.log

# Custom application configuration
app:
  security:
    jwt:
      secret: ${JWT_SECRET}
      expiration: ${JWT_EXPIRATION:3600}
  integration:
    external-api:
      base-url: ${EXTERNAL_API_URL:https://api.external.com}
      timeout: ${EXTERNAL_API_TIMEOUT:5000}
      retry-attempts: ${EXTERNAL_API_RETRIES:3}
  cache:
    ttl: ${CACHE_TTL:3600}
    max-size: ${CACHE_MAX_SIZE:1000}